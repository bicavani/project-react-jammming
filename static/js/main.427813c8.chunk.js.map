{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","bind","assertThisInitialized","handleTermChange","term","onSearch","event","target","value","react_default","a","createElement","className","placeholder","onChange","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","onClick","name","artist","album","renderAction","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","state","updatePlaylistName","_this2","setState","_this3","find","savedTrack","newPlaylistTracks","toConsumableArray","filter","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.427813c8.chunk.js","sourcesContent":["const clientId = '34cd77f4741c45f886bc91b8592fa477';\r\nconst redirectUri ='http://localhost:3000/';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=playlist-modify-public&response_type=token`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if(!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => {\r\n        return {\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        }\r\n      })\r\n    })\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if(!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = {Authorization: `Bearer ${accessToken}`};\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({name: name})\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({uris: trackUris})\r\n        })\r\n      })\r\n    })\r\n  }\r\n};\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n  search(term) {\r\n    this.props.onSearch(term);\r\n  }\r\n  handleTermChange(event) {\r\n    let term = event.target.value;\r\n    this.search(term);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album or Artist\" onChange={this.handleTermChange} />\r\n        <button className=\"SearchButton\">SEARCH</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\r\n    } else {\r\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\r\n    }\r\n  }\r\n  render() {\r\n    const {track} = this.props;\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{/*Track name*/track.name}</h3>\r\n          <p>{track.artist} | {track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {this.props.tracks.map(track => {\r\n          return <Track\r\n            key={track.id}\r\n            track={track}\r\n            onAdd={this.props.onAdd}\r\n            isRemoval={this.props.isRemoval}\r\n            onRemove={this.props.onRemove}\r\n          />\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Result</h2>\r\n        <TrackList\r\n          tracks={this.props.searchResults}\r\n          onAdd={this.props.onAdd}\r\n          isRemoval={false}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n  handleNameChange(event) {\r\n    const name = event.target.value;\r\n    this.props.onNameChange(name);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input value={this.props.playlistName} onChange={this.handleNameChange}/>\r\n        <TrackList\r\n          tracks={this.props.playlistTracks}\r\n          isRemoval={true}\r\n          onRemove={this.props.onRemove}\r\n        />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: [],\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n   }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: [],\n      });\n    })\n  }\n\n  addTrack(track) {\n    const { playlistTracks } = this.state;\n    const found = playlistTracks.find(savedTrack => {\n      return savedTrack.id === track.id;\n    });\n    if (!found) {\n      const newPlaylistTracks = [...playlistTracks, track];\n      this.setState({\n        playlistTracks: newPlaylistTracks,\n      });\n    } else return;\n  }\n\n  removeTrack(track) {\n    const { playlistTracks } = this.state;\n    const newPlaylistTracks = playlistTracks.filter(savedTrack => {\n      return savedTrack.id !== track.id;\n    });\n    this.setState({\n      playlistTracks: newPlaylistTracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}